package org.xpertss.crypto.asn1;


/**
 * Resolves requests for instances based on a class object. New 
 * instances are generated by invoking <code>newInstance()</code> 
 * on the wrapped class object. The class must provide a no-arg 
 * default constructor.
 */
public class ClassInstanceResolver extends Object implements Resolver {
   /**
    * The class that is used as a factory.
    */
   private Class factory_;


   /**
    * Creates an instance with the given factory class.
    *
    * @param factory The factory class.
    * @exception IllegalArgumentException if <code>factory</code>
    *   has no default constructor, or does not implement <code>
    *   ASN1Type</code>.
    */
   public ClassInstanceResolver(Class factory)
   {
      if (factory == null)
         throw new NullPointerException("Need a factory class!");
      try {
         factory.getConstructor(new Class[0]);
      } catch (NoSuchMethodException e) {
         throw new IllegalArgumentException("Class " + factory.getName() + " has no default constructor!");
      }
      if (!ASN1Type.class.isAssignableFrom(factory))
         throw new IllegalArgumentException("Class " + factory.getName() + " is not an ASN1Type!");
      factory_ = factory;
   }


   /**
    * Returns the class object of the factory class.
    *
    * @return The class object.
    */
   public Class getFactoryClass()
   {
      return factory_;
   }


   /**
    * Resolves the call by returning a new instance of the
    * the factory class. The factory class must have been
    * specified at the time of constructing this instance.
    *
    * @param caller The caller. The caller is ignored.
    * @exception ResolverException if for some reason
    *   the call cannot be resolved.
    */
   public ASN1Type resolve(ASN1Type caller)
      throws ResolverException
   {
      try {
         return (ASN1Type) factory_.newInstance();
      } catch (Exception e) {
         throw new ResolverException("Caught " + e.getClass().getName() + "(\"" + e.getMessage() + "\")");
      }
   }

}

